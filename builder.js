const{writeFileSync,mkdirSync}=require('fs');const{join}=require('path');mkdirSync(join(__dirname,'.turbo','bin'),{recursive:true});
const build = `const path=require("path");const fs=require("fs");const PATH=path.join(__dirname, "..","..");const { spawnSync }=require('child_process');let tsc=(()=>{if(process.platform==="win32"){console.log("Building TypeScript... (Windows)");return spawnSync("npm.cmd", ["exec", "-c", "tsc"], {cwd: PATH,env: process.env});} else {console.log("Building TypeScript...");return spawnSync("npm", ["exec", "-c", "tsc"], {cwd: PATH,env: process.env});}})();if(tsc.status==0){console.log("TypeScipt Built Successfully!");} else {console.log("TypeScript Build Failed!");console.log(tsc.stdout.toString());process.exit(2);}function move_dir_recursive(oldPath, newPath) {fs.mkdirSync(newPath, { recursive: true });fs.readdirSync(oldPath, { withFileTypes: true }).forEach(file => {if(file.isFile()){fs.renameSync(path.join(oldPath, file.name),path.join(newPath, file.name));} else if(file.isDirectory()){move_dir_recursive(path.join(oldPath, file.name),path.join(newPath, file.name));}});fs.rmSync(oldPath, { recursive: true, force: true }, (e) => {if(e) console.warn(e);});}console.log("Moving Files...");move_dir_recursive(path.join(PATH, "build"),path.join(PATH, ".turbo", "build"));/**console.log("Files Moved Successfully!");console.log("Packaging...");*/console.log("Done!");`;
writeFileSync(join(__dirname,".turbo", "bin", "build.js"), build);
const cli = `if(process.argv.includes("--diagnose")){console.log("Diagnosing...");let good_exit=false;try {{Object.defineProperty(globalThis,"LAZY_LOAD_TOKIO",{ value: true });const tokiojs=require('../../.turbo/build/lib');tokiojs.FLAGS["TOKIO_INTERNALS"]=true;tokiojs.FLAGS["TOKIO_BINLOADER"]=false;const { app }=tokiojs.load("OLDCONSOLE","NOINJECT");app.main=async () => {good_exit=true;};app.run();};if(!good_exit) throw new Error("TokioJS Error: TOKIO_LOADED_BUT_DID_NOT_EXIT");} catch (e) {console.error("Diagnose failed !");console.error(e);process.exit(1);}console.log("Diagnose success !");process.exit(0);};const tokiojs=require('../../.turbo/build/lib');tokiojs.FLAGS["TOKIO_INTERNALS"]=true;tokiojs.FLAGS["TOKIO_BIN"]=false;const METADATA={env: process.env,argv: process.argv.slice(2),raw_args: process.argv,current_working_directory: process.cwd(),};const tokio=tokiojs.load("OLDCONSOLE");const { app }=tokio;var /**@type boolean*/SHOULD_EXIT=true;const COMMANDS={"scaffold": (/**@type string[]*/args) => {console.log("Scaffolding...");},"help": () => {console.log("Help...");}};/** ** @param {string[]} argv*/function parser(argv) {const command=argv[0].toLowerCase();const args=argv.slice(1);switch(command){case "scaffold": COMMANDS.scaffold(args); break;default: COMMANDS.help(); break;};};app.main=() => {if(METADATA.argv.length != 0){parser(METADATA.argv);} else {SHOULD_EXIT=false;}};app.run();`;
writeFileSync(join(__dirname,".turbo", "bin", "cli.js"), cli);
const package = `const path=require("path");const fs=require("fs");const PATH=path.join(__dirname, "..","..");console.log("Packaging...");function move_dir_recursive(oldPath, newPath) {fs.mkdirSync(newPath, { recursive: true });fs.readdirSync(oldPath, { withFileTypes: true }).forEach(file => {if(file.isFile()){fs.renameSync(path.join(oldPath, file.name),path.join(newPath, file.name));} else if(file.isDirectory()){move_dir_recursive(path.join(oldPath, file.name),path.join(newPath, file.name));}});fs.rmSync(oldPath, { recursive: true, force: true }, (e) => {if(e) console.warn(e);});}try {fs.rmSync(path.join(PATH, "src"), { recursive: true, force: true });move_dir_recursive(path.join(PATH, ".turbo", "build"),path.join(PATH, "src"));fs.rmSync(path.join(PATH, "doc"), { recursive: true, force: true });fs.rmSync(path.join(PATH, "examples"), { recursive: true, force: true });fs.rmSync(path.join(PATH, ".github"), { recursive: true, force: true });fs.rmSync(path.join(PATH, ".enderpearl"), { recursive: true, force: true });fs.rmSync(path.join(PATH, "tsconfig.json"), { recursive: true, force: true });} catch (e) { console.error(e) }console.log("Packaging... (DONE)");`;
writeFileSync(join(__dirname,".turbo", "bin", "package.js"), package);
console.log("Done!");