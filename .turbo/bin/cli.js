if(process.argv.includes("--diagnose")){console.log("Diagnosing...");let good_exit=false;try {{Object.defineProperty(globalThis,"LAZY_LOAD_TOKIO",{ value: true });const tokiojs=require('../../.turbo/build/lib');tokiojs.FLAGS["TOKIO_INTERNALS"]=true;tokiojs.FLAGS["TOKIO_BINLOADER"]=false;const { app }=tokiojs.load("OLDCONSOLE","NOINJECT");app.main=async () => {good_exit=true;};app.run();};if(!good_exit) throw new Error("TokioJS Error: TOKIO_LOADED_BUT_DID_NOT_EXIT");} catch (e) {console.error("Diagnose failed !");console.error(e);process.exit(1);}console.log("Diagnose success !");process.exit(0);};const tokiojs=require('../../.turbo/build/lib');tokiojs.FLAGS["TOKIO_INTERNALS"]=true;tokiojs.FLAGS["TOKIO_BIN"]=false;const METADATA={env: process.env,argv: process.argv.slice(2),raw_args: process.argv,current_working_directory: process.cwd(),};const tokio=tokiojs.load("OLDCONSOLE");const { app }=tokio;var /**@type boolean*/SHOULD_EXIT=true;const COMMANDS={"scaffold": (/**@type string[]*/args) => {console.log("Scaffolding...");},"help": () => {console.log("Help...");}};/** ** @param {string[]} argv*/function parser(argv) {const command=argv[0].toLowerCase();const args=argv.slice(1);switch(command){case "scaffold": COMMANDS.scaffold(args); break;default: COMMANDS.help(); break;};};app.main=() => {if(METADATA.argv.length != 0){parser(METADATA.argv);} else {SHOULD_EXIT=false;}};app.run();